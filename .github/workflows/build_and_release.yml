name: Build & Release PHP Extension

permissions:
  contents: write

on:
  push:
    tags:
      - 'v*'           # Trigger on tags like v1.0.0
  workflow_dispatch:

jobs:
  build-linux-macos:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        php: ['8.1', '8.2', '8.3']
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          tools: phpize

      - name: Build extension
        run: |
          phpize
          ./configure --enable-hello
          make
          mkdir -p output
          cp modules/*.so output/
          echo "; Enable hello extension" > output/hello.ini
          echo "extension=hello" >> output/hello.ini

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: hello-${{ matrix.os }}-php${{ matrix.php }}
          path: output/*

  build-windows:
    strategy:
      matrix:
        arch: [x64, x86]
        ts: [nts, ts]
        php: ['8.1', '8.2', '8.3']
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v4

      - name: Build extension (Windows)
        uses: php/php-windows-builder/extension@v1
        with:
          extension-url: https://github.com/mohan2020coder/hellophpext.git
          extension-ref: main
          php-version: ${{ matrix.php }}
          arch: ${{ matrix.arch }}
          ts: ${{ matrix.ts }}
          args: "--enable-hello"

      - name: Debug: List artifacts structure
        run: |
          Write-Host "Full artifacts directory structure:"
          Get-ChildItem -Path artifacts -Recurse -Force
          Write-Host "DLL files found:"
          Get-ChildItem -Path artifacts -Recurse -Filter *.dll

      - name: Prepare ini and copy DLLs
        run: |
          # Remove existing output directory
          Remove-Item -Path output -Recurse -Force -ErrorAction SilentlyContinue
          mkdir output
          
          # Create ini file with correct extension name for Windows
          echo "; Enable hello extension" > output/hello.ini
          echo "extension=php_hello" >> output/hello.ini
          
          # Find and copy all DLL files from artifacts
          $dllFiles = Get-ChildItem -Path artifacts -Recurse -Filter *.dll
          Write-Host "Found $($dllFiles.Count) DLL files:"
          foreach ($dll in $dllFiles) {
              Write-Host "Copying: $($dll.FullName)"
              Copy-Item -Path $dll.FullName -Destination output
          }
          
          # Also try to find the DLL with specific patterns
          if (Test-Path "artifacts\php_hello.dll") {
              Copy-Item -Path "artifacts\php_hello.dll" -Destination output
          }
          if (Test-Path "artifacts\Release\php_hello.dll") {
              Copy-Item -Path "artifacts\Release\php_hello.dll" -Destination output
          }

      - name: Verify output contents
        run: |
          Write-Host "Contents of output directory:"
          Get-ChildItem -Path output -Recurse
          Write-Host "File sizes:"
          Get-ChildItem -Path output -Recurse | ForEach-Object { Write-Host "$($_.Name): $($_.Length) bytes" }

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: hello-windows-${{ matrix.arch }}-${{ matrix.ts }}-php${{ matrix.php }}
          path: output/*
          retention-days: 1

  package-release:
    runs-on: ubuntu-latest
    needs: [build-linux-macos, build-windows]
    env:
      TAG_NAME: ${{ github.ref_name }}
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/
          pattern: hello-*
          merge-multiple: true

      - name: Debug: List downloaded artifacts
        run: |
          echo "Downloaded artifacts structure:"
          find dist/ -type f -name "*" | sort
          echo "Artifact directories:"
          ls -la dist/

      - name: Organize artifacts by OS
        run: |
          mkdir -p release/linux release/macos release/windows
          
          # Copy Linux artifacts
          for d in dist/hello-ubuntu*; do
            if [ -d "$d" ]; then
              echo "Copying Linux artifact: $d"
              cp -r "$d"/* release/linux/ 2>/dev/null || true
            fi
          done
          
          # Copy macOS artifacts  
          for d in dist/hello-macos*; do
            if [ -d "$d" ]; then
              echo "Copying macOS artifact: $d"
              cp -r "$d"/* release/macos/ 2>/dev/null || true
            fi
          done
          
          # Copy Windows artifacts
          for d in dist/hello-windows*; do
            if [ -d "$d" ]; then
              echo "Copying Windows artifact: $d"
              cp -r "$d"/* release/windows/ 2>/dev/null || true
            fi
          done
          
          echo "Final release directory structure:"
          find release/ -type f | sort

      - name: Create OS-specific ZIPs
        run: |
          echo "Creating hello-${TAG_NAME} OS-specific ZIP files"
          ls -la release/

          cd release
          for os in linux macos windows; do
            if [ -d "$os" ] && [ "$(ls -A $os)" ]; then
              echo "Creating ZIP for $os with files:"
              ls -la $os/
              zip -r ../hello-${os}-${TAG_NAME}.zip "$os"
            else
              echo "Warning: $os directory is empty or missing"
            fi
          done
          cd ..

      - name: List ZIP files before release
        run: |
          ls -la hello-*.zip || echo "No ZIP files found"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: hello-*-${{ env.TAG_NAME }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}