name: Build & Release PHP Extension

on:
  push:
    tags:
      - 'v*'           # Trigger on tags like v1.0.0
  workflow_dispatch:

jobs:
  build-linux-macos:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        php: ['8.1', '8.2', '8.3']
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          tools: phpize

      - name: Build extension
        run: |
          phpize
          ./configure --enable-hello
          make
          mkdir -p output
          cp modules/*.so output/
          echo "; Enable hello extension" > output/hello.ini
          echo "extension=hello" >> output/hello.ini

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: hello-${{ matrix.os }}-php${{ matrix.php }}
          path: output/*

  build-windows:
    strategy:
      matrix:
        arch: [x64, x86]
        ts: [nts, ts]
        php: ['8.1', '8.2', '8.3']
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v4

      - name: Build extension (Windows)
        uses: php/php-windows-builder/extension@v1
        with:
          extension-url: https://github.com/mohan2020coder/hellophpext.git
          extension-ref: main
          php-version: ${{ matrix.php }}
          arch: ${{ matrix.arch }}
          ts: ${{ matrix.ts }}
          args: "--enable-hello"

      - name: Prepare ini
        run: |
          mkdir output
          echo "; Enable hello extension" > output/hello.ini
          echo "extension=hello" >> output/hello.ini
          Copy-Item artifacts\**\*.dll output\

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: hello-windows-${{ matrix.arch }}-${{ matrix.ts }}-php${{ matrix.php }}
          path: output/*

  package-release:
    runs-on: ubuntu-latest
    needs: [build-linux-macos, build-windows]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/

      - name: Organize artifacts by OS
        run: |
          mkdir release
          for d in dist/*; do
            if [[ "$d" == *ubuntu* ]]; then
              mkdir -p release/linux
              cp -r "$d"/* release/linux/
            elif [[ "$d" == *macos* ]]; then
              mkdir -p release/macos
              cp -r "$d"/* release/macos/
            elif [[ "$d" == *windows* ]]; then
              mkdir -p release/windows
              cp -r "$d"/* release/windows/
            fi
          done

      - name: Create OS-specific ZIP
        run: |
          cd release
          zip -r ../hello-${GITHUB_REF_NAME}.zip *
          cd ..

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: hello-${GITHUB_REF_NAME}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
